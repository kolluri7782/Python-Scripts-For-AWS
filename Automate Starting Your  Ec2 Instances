import json
import boto3

def lambda_handler(event, context):
    # Specify your AWS credentials
    #Replace 'ap-south-1'  
    aws_region_name = 'ap-south-1'  

    # Initialize a session using the specified credentials
    session = boto3.Session(
        region_name=aws_region_name
    )

    # Initialize the EC2 client using the session
    ec2 = session.client('ec2')

    # Define the instance IDs of the instances you want to start
    instance_ids = ['i-0f48c6eb468b041cf', 'i-05f4cce15f72c0958']  # Replace with your instance IDs

    # Get the current state of the instances
    instances = ec2.describe_instances(InstanceIds=instance_ids)['Reservations']

    # Check if instances are in a stopped state
    instances_to_start = []
    for reservation in instances:
        for instance in reservation['Instances']:
            if instance['State']['Name'] == 'stopped':
                instances_to_start.append(instance)

    # Initialize lists to store instance states and started instance IDs
    instance_states = []
    started_instance_ids = []

    # Start instances sequentially
    for instance in instances_to_start:
        # Start the instance
        response = ec2.start_instances(InstanceIds=[instance['InstanceId']])
        
        # Extract the current state of the instance
        instance_states.append(instance['State']['Name'])
        
        # Append the instance ID to the list of started instance IDs
        started_instance_ids.append(instance['InstanceId'])

    # Return success message with started instance IDs
    if started_instance_ids:
        # Convert started instance IDs to a string
        started_instance_ids_str = ', '.join(started_instance_ids)
        
        # Publish message to SNS topic
        sns = boto3.client('sns')
        sns.publish(
            TopicArn='arn:aws:sns:ap-south-1:992382447965:Startinginstances',  #Replace Your SNS topic 
            Subject='Instances Started Successfully',
            Message=f'Instances started successfully. Instance IDs: {started_instance_ids_str}'
        )

        return {
            'statusCode': 200,
            'body': json.dumps({'message': 'Instances started successfully.', 'started_instance_ids': started_instance_ids})
        }
    # Return message indicating that instances are already running
    else:
        # Get the current state of all instances
        all_instances_states = [instance['State']['Name'] for reservation in instances for instance in reservation['Instances']]
        
        return {
            'statusCode': 200,
            'body': json.dumps({'message': 'Instances are already running.', 'instance_states': all_instances_states})
        }
